FROM ubuntu:20.04
RUN sed -i 's/http:\/\/archive.ubuntu.com/http:\/\/archive.ubuntu.com\/ubuntu/' /etc/apt/sources.list

RUN DEBIAN_FRONTEND=noninteractive apt update -y --fix-missing && apt upgrade -y
RUN DEBIAN_FRONTEND=noninteractive apt install -y build-essential git curl graphviz wget software-properties-common cmake sudo


WORKDIR /tmp
RUN wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb
RUN dpkg -i packages-microsoft-prod.deb
RUN DEBIAN_FRONTEND=noninteractive apt update -y
RUN add-apt-repository universe
RUN DEBIAN_FRONTEND=noninteractive apt install -y powershell
RUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
RUN dpkg -i packages-microsoft-prod.deb
RUN rm packages-microsoft-prod.deb
RUN DEBIAN_FRONTEND=noninteractive apt update -y
RUN DEBIAN_FRONTEND=noninteractive apt install -y dotnet-sdk-8.0

RUN git clone https://github.com/microsoft/msquic.git msquic
WORKDIR /tmp/msquic
RUN git checkout 5c070cdc
RUN git submodule update --init --recursive
RUN pwsh -Command ./scripts/prepare-machine.ps1
# compile server without client authentication
COPY msquicNonCA.patch .
RUN patch -p1 < msquicNonCA.patch
RUN pwsh -Command ./scripts/build.ps1 -Tls openssl
RUN mv artifacts/bin/linux/x64_Debug_openssl/quicinteropserver artifacts/bin/linux/x64_Debug_openssl/quicinteropserver_noClientAuthentication
# compile server with client authentication
COPY msquicCA.patch .
RUN patch -p1 < msquicCA.patch
RUN pwsh -Command ./scripts/build.ps1 -Tls openssl
RUN mv artifacts/bin/linux/x64_Debug_openssl/quicinteropserver artifacts/bin/linux/x64_Debug_openssl/quicinteropserver_clientAuthentication

RUN DEBIAN_FRONTEND=noninteractive apt install -y pip python3-tk lsof libssl-dev python3-dev default-jdk

RUN pip install asgiref dnslib httpbin starlette wsproto aioquic pydot && \
    pip install asgiref dnslib httpbin starlette wsproto --no-cache-dir && \
    pip install Werkzeug==2.0.3 && \
    pip install "flask<2.2.0"

WORKDIR /tmp/quicLearner
RUN python3 -m pip install pydot py4j==0.10.9.7

COPY run_fuzzing.sh /run_fuzzing.sh
RUN chmod +x /run_fuzzing.sh

ENTRYPOINT ["/run_fuzzing.sh"]
